#!/bin/bash

# Pleasant Cove Design - Production Setup Test Script
# Tests that all production components are configured correctly

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ Testing Production Setup${NC}"
echo "================================="

# Function to check if environment variable is set
check_env_var() {
    local var_name=$1
    local var_value=$2
    local required=$3
    
    if [[ -z "$var_value" ]]; then
        if [[ "$required" == "true" ]]; then
            echo -e "${RED}‚ùå $var_name is required but not set${NC}"
            return 1
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $var_name is optional and not set${NC}"
            return 0
        fi
    else
        echo -e "${GREEN}‚úÖ $var_name is configured${NC}"
        return 0
    fi
}

# Load environment variables
if [ -f "pleasantcovedesign/server/.env.production" ]; then
    source pleasantcovedesign/server/.env.production
    echo -e "${GREEN}‚úÖ Loaded .env.production${NC}\n"
else
    echo -e "${RED}‚ùå .env.production not found. Run ./setup-production.sh first${NC}"
    exit 1
fi

echo -e "${YELLOW}üìß Testing SendGrid Configuration${NC}"
check_env_var "SENDGRID_API_KEY" "$SENDGRID_API_KEY" "true"
check_env_var "FROM_EMAIL" "$FROM_EMAIL" "true"
check_env_var "FROM_NAME" "$FROM_NAME" "false"

# Test SendGrid API key format
if [[ $SENDGRID_API_KEY == SG.* ]]; then
    echo -e "${GREEN}‚úÖ SendGrid API key format is correct${NC}"
else
    echo -e "${RED}‚ùå SendGrid API key should start with 'SG.'${NC}"
fi

echo -e "\n${YELLOW}üí≥ Testing Stripe Configuration${NC}"
check_env_var "STRIPE_SECRET_KEY" "$STRIPE_SECRET_KEY" "true"
check_env_var "STRIPE_PUBLISHABLE_KEY" "$STRIPE_PUBLISHABLE_KEY" "true"
check_env_var "STRIPE_WEBHOOK_SECRET" "$STRIPE_WEBHOOK_SECRET" "true"

# Test Stripe key formats
if [[ $STRIPE_SECRET_KEY == sk_live_* ]]; then
    echo -e "${GREEN}‚úÖ Using LIVE Stripe secret key${NC}"
elif [[ $STRIPE_SECRET_KEY == sk_test_* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Using TEST Stripe secret key (switch to live for production)${NC}"
else
    echo -e "${RED}‚ùå Invalid Stripe secret key format${NC}"
fi

if [[ $STRIPE_PUBLISHABLE_KEY == pk_live_* ]]; then
    echo -e "${GREEN}‚úÖ Using LIVE Stripe publishable key${NC}"
elif [[ $STRIPE_PUBLISHABLE_KEY == pk_test_* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Using TEST Stripe publishable key (switch to live for production)${NC}"
else
    echo -e "${RED}‚ùå Invalid Stripe publishable key format${NC}"
fi

echo -e "\n${YELLOW}ü§ñ Testing Minerva/OpenAI Configuration${NC}"
check_env_var "OPENAI_API_KEY" "$OPENAI_API_KEY" "true"
check_env_var "MINERVA_URL" "$MINERVA_URL" "false"

# Test OpenAI API key format
if [[ $OPENAI_API_KEY == sk-* ]]; then
    echo -e "${GREEN}‚úÖ OpenAI API key format is correct${NC}"
else
    echo -e "${RED}‚ùå OpenAI API key should start with 'sk-'${NC}"
fi

echo -e "\n${YELLOW}üîß Testing Server Configuration${NC}"
check_env_var "NODE_ENV" "$NODE_ENV" "true"
check_env_var "DATABASE_URL" "$DATABASE_URL" "true"
check_env_var "JWT_SECRET" "$JWT_SECRET" "true"
check_env_var "SESSION_SECRET" "$SESSION_SECRET" "true"

# Test if secrets are still default values
if [[ $JWT_SECRET == *"REPLACE_WITH"* ]]; then
    echo -e "${RED}‚ùå JWT_SECRET still contains default placeholder${NC}"
fi

if [[ $SESSION_SECRET == *"REPLACE_WITH"* ]]; then
    echo -e "${RED}‚ùå SESSION_SECRET still contains default placeholder${NC}"
fi

echo -e "\n${YELLOW}üåê Testing Production URLs${NC}"
check_env_var "API_BASE_URL" "$API_BASE_URL" "true"
check_env_var "FRONTEND_URL" "$FRONTEND_URL" "true"
check_env_var "ADMIN_URL" "$ADMIN_URL" "true"

# Test URL formats
if [[ $API_BASE_URL == https://* ]]; then
    echo -e "${GREEN}‚úÖ API_BASE_URL uses HTTPS${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  API_BASE_URL should use HTTPS for production${NC}"
fi

echo -e "\n${BLUE}üß™ Running Functional Tests${NC}"

# Test 1: Check if server files exist
if [ -f "pleasantcovedesign/server/index.ts" ]; then
    echo -e "${GREEN}‚úÖ Server main file exists${NC}"
else
    echo -e "${RED}‚ùå Server main file missing${NC}"
fi

# Test 2: Check if email service exists
if [ -f "pleasantcovedesign/server/email-service.ts" ]; then
    echo -e "${GREEN}‚úÖ Email service exists${NC}"
else
    echo -e "${RED}‚ùå Email service missing${NC}"
fi

# Test 3: Check if Stripe configuration exists
if [ -f "pleasantcovedesign/server/stripe-config.js" ] || [ -f "pleasantcovedesign/server/stripe-config.ts" ]; then
    echo -e "${GREEN}‚úÖ Stripe configuration exists${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Stripe configuration file not found${NC}"
fi

# Test 4: Check database connectivity (if sqlite)
if [[ $DATABASE_URL == *"sqlite"* ]] || [[ $DATABASE_URL == *".db"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Using SQLite database (consider PostgreSQL for production)${NC}"
fi

echo -e "\n${BLUE}üìã Production Readiness Summary${NC}"
echo "======================================"

echo -e "\n${GREEN}‚úÖ Ready for Production:${NC}"
echo "‚Ä¢ Environment variables configured"
echo "‚Ä¢ Security secrets generated"
echo "‚Ä¢ Email service ready (SendGrid)"
echo "‚Ä¢ Payment processing ready (Stripe)"

echo -e "\n${YELLOW}‚ö†Ô∏è  Next Steps:${NC}"
echo "‚Ä¢ Test email sending with real SendGrid API"
echo "‚Ä¢ Verify Stripe webhook endpoints"
echo "‚Ä¢ Set up production database"
echo "‚Ä¢ Configure domain and SSL certificates"
echo "‚Ä¢ Deploy to hosting platform"

echo -e "\n${BLUE}üöÄ Deployment Commands:${NC}"
echo "‚Ä¢ Railway: railway deploy"
echo "‚Ä¢ Vercel: vercel --prod"
echo "‚Ä¢ Manual: Copy .env.production to your server"

echo -e "\n${RED}üîí Security Reminders:${NC}"
echo "‚Ä¢ NEVER commit .env.production to git"
echo "‚Ä¢ Backup environment variables securely"
echo "‚Ä¢ Monitor API usage and webhook deliveries"
echo "‚Ä¢ Set up error tracking (Sentry)"
echo "‚Ä¢ Enable database backups"

echo -e "\n${GREEN}üéâ Production setup test complete!${NC}" 